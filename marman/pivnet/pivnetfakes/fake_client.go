// Code generated by counterfeiter. DO NOT EDIT.
package pivnetfakes

import (
	sync "sync"

	pivnet "github.com/cf-platform-eng/isv-ci-toolkit/marman/pivnet"
	pivneta "github.com/pivotal-cf/go-pivnet"
)

type FakeClient struct {
	ListFilesForReleaseStub        func(string, int) ([]pivneta.FileGroup, error)
	listFilesForReleaseMutex       sync.RWMutex
	listFilesForReleaseArgsForCall []struct {
		arg1 string
		arg2 int
	}
	listFilesForReleaseReturns struct {
		result1 []pivneta.FileGroup
		result2 error
	}
	listFilesForReleaseReturnsOnCall map[int]struct {
		result1 []pivneta.FileGroup
		result2 error
	}
	ListReleasesStub        func(string) ([]pivneta.Release, error)
	listReleasesMutex       sync.RWMutex
	listReleasesArgsForCall []struct {
		arg1 string
	}
	listReleasesReturns struct {
		result1 []pivneta.Release
		result2 error
	}
	listReleasesReturnsOnCall map[int]struct {
		result1 []pivneta.Release
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ListFilesForRelease(arg1 string, arg2 int) ([]pivneta.FileGroup, error) {
	fake.listFilesForReleaseMutex.Lock()
	ret, specificReturn := fake.listFilesForReleaseReturnsOnCall[len(fake.listFilesForReleaseArgsForCall)]
	fake.listFilesForReleaseArgsForCall = append(fake.listFilesForReleaseArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("ListFilesForRelease", []interface{}{arg1, arg2})
	fake.listFilesForReleaseMutex.Unlock()
	if fake.ListFilesForReleaseStub != nil {
		return fake.ListFilesForReleaseStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesForReleaseReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListFilesForReleaseCallCount() int {
	fake.listFilesForReleaseMutex.RLock()
	defer fake.listFilesForReleaseMutex.RUnlock()
	return len(fake.listFilesForReleaseArgsForCall)
}

func (fake *FakeClient) ListFilesForReleaseCalls(stub func(string, int) ([]pivneta.FileGroup, error)) {
	fake.listFilesForReleaseMutex.Lock()
	defer fake.listFilesForReleaseMutex.Unlock()
	fake.ListFilesForReleaseStub = stub
}

func (fake *FakeClient) ListFilesForReleaseArgsForCall(i int) (string, int) {
	fake.listFilesForReleaseMutex.RLock()
	defer fake.listFilesForReleaseMutex.RUnlock()
	argsForCall := fake.listFilesForReleaseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ListFilesForReleaseReturns(result1 []pivneta.FileGroup, result2 error) {
	fake.listFilesForReleaseMutex.Lock()
	defer fake.listFilesForReleaseMutex.Unlock()
	fake.ListFilesForReleaseStub = nil
	fake.listFilesForReleaseReturns = struct {
		result1 []pivneta.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListFilesForReleaseReturnsOnCall(i int, result1 []pivneta.FileGroup, result2 error) {
	fake.listFilesForReleaseMutex.Lock()
	defer fake.listFilesForReleaseMutex.Unlock()
	fake.ListFilesForReleaseStub = nil
	if fake.listFilesForReleaseReturnsOnCall == nil {
		fake.listFilesForReleaseReturnsOnCall = make(map[int]struct {
			result1 []pivneta.FileGroup
			result2 error
		})
	}
	fake.listFilesForReleaseReturnsOnCall[i] = struct {
		result1 []pivneta.FileGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListReleases(arg1 string) ([]pivneta.Release, error) {
	fake.listReleasesMutex.Lock()
	ret, specificReturn := fake.listReleasesReturnsOnCall[len(fake.listReleasesArgsForCall)]
	fake.listReleasesArgsForCall = append(fake.listReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListReleases", []interface{}{arg1})
	fake.listReleasesMutex.Unlock()
	if fake.ListReleasesStub != nil {
		return fake.ListReleasesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListReleasesCallCount() int {
	fake.listReleasesMutex.RLock()
	defer fake.listReleasesMutex.RUnlock()
	return len(fake.listReleasesArgsForCall)
}

func (fake *FakeClient) ListReleasesCalls(stub func(string) ([]pivneta.Release, error)) {
	fake.listReleasesMutex.Lock()
	defer fake.listReleasesMutex.Unlock()
	fake.ListReleasesStub = stub
}

func (fake *FakeClient) ListReleasesArgsForCall(i int) string {
	fake.listReleasesMutex.RLock()
	defer fake.listReleasesMutex.RUnlock()
	argsForCall := fake.listReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListReleasesReturns(result1 []pivneta.Release, result2 error) {
	fake.listReleasesMutex.Lock()
	defer fake.listReleasesMutex.Unlock()
	fake.ListReleasesStub = nil
	fake.listReleasesReturns = struct {
		result1 []pivneta.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListReleasesReturnsOnCall(i int, result1 []pivneta.Release, result2 error) {
	fake.listReleasesMutex.Lock()
	defer fake.listReleasesMutex.Unlock()
	fake.ListReleasesStub = nil
	if fake.listReleasesReturnsOnCall == nil {
		fake.listReleasesReturnsOnCall = make(map[int]struct {
			result1 []pivneta.Release
			result2 error
		})
	}
	fake.listReleasesReturnsOnCall[i] = struct {
		result1 []pivneta.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listFilesForReleaseMutex.RLock()
	defer fake.listFilesForReleaseMutex.RUnlock()
	fake.listReleasesMutex.RLock()
	defer fake.listReleasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pivnet.Client = new(FakeClient)
